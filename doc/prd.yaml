# docx-plainify 项目设计文档 (YAML版)

文档版本: "1.0"
最后更新日期: "2025-05-26"

项目概述:
  项目名称: "docx-plainify"
  项目目标: "开发一个工具，将 .docx 文件转换为结构化的纯文本格式（主要为 YAML），旨在使文档内容更易于被人工智能（AI）模型读取、理解和处理。项目特别关注对文档中结构化信息（如列表、表格）和图像内容的有效转换。"
  核心功能:
    - "从 .docx 文件中提取纯文本内容。"
    - "识别并转换文档中的结构化元素，如段落、标题、列表（包括嵌套列表）和表格。"
    - "将提取和转换后的内容输出为 YAML 格式，保留原始文档的结构信息。"
    - "（可选）提取文档中的图片，调用多模态大语言模型（LLM）或视觉 API 生成图片的语义描述文本，并将描述文本整合到 YAML 输出中。"
  目标用户:
    - "需要将 .docx 文档内容输入给 AI 模型进行分析、处理的研究人员或开发者。"
    - "希望将 .docx 文档转换为更易于机器处理的结构化文本格式的用户。"

核心功能设计:
  DOCX内容解析:
    文本提取: "提取所有可读的文本内容。"
    结构识别:
      段落: "识别普通文本段落。"
      标题: "识别不同级别的标题"
      列表: "识别有序列表、无序列表及其嵌套层级。"
      表格: "识别表格结构，包括表头和数据行。"
  结构化输出_YAML:
    基本原则:
      - "文档内容按其在原始文件中的顺序排列。"
      - "元素识别与处理原则： 系统优先识别五种核心内容元素：段落（paragraph）、标题（heading）、列表（list）、表格（table）和图片描述（image）。"
      - "对于文档中任何不属于这五种核心元素的其他组件，若包含可提取文本： 则提取其纯文本内容，并将其作为一个独立的 type: paragraph 元素添加到 YAML 输出中。原始格式（如加粗、颜色）将被移除。"
      - "若不含可提取文本或为空： 则该组件将被直接忽略，不会出现在 YAML 输出中。"
      - "每种内容元素（段落、标题、列表、表格、图片描述）表示为一个独立的 YAML 对象或元素。"
      - "使用 `type` 字段来区分不同的内容元素。"
      - "type 字段为 heading, paragraph, list, table, image"
    文本示例:
      - text: "这是一个普通段落的文本内容。"
    标题示例:
      - type: heading
        text: "文档主标题"
    段落示例:
      - type: paragraph
        text: "这是一个普通段落的文本内容。"
    列表_包括嵌套列表_示例:
      - type: list
        items:
          - text: "列表项一"
          - text: "列表项二"
            children: # 内嵌列表
              - text: "子列表项 A"
              - text: "子列表项 B"
    表格示例:
      表示方式: "表格的每一行数据转换为一个 YAML 对象（mapping）。该对象的键是表头单元格的值，值是对应数据单元格的值。整个表格数据表现为一个由行对象组成的 YAML 列表。"
      原始表格内容示例_成员职责: |
        | 姓名  | 职责          | 备注                                     |
        | :---- | :------------ | :--------------------------------------- |
        | 张三  | 产品经理      | 负责需求                                 |
        | 李四  | UI设计师      | 设计原型，包含：<br/> - 首页<br/> - 列表页 |
        | 王五  | 开发工程师    |                                          |
      对应YAML输出示例:
        - type: table
          rows:
            - 姓名: "张三"
              职责: "产品经理"
              备注: "负责需求"
            - 姓名: "李四"
              职责: "UI设计师"
              备注: # 单元格内可以包含复杂结构，段落、标题、列表、图片均可（以列表为例）
                - type: list
                  items:
                    - text: "列表项一"
                    - text: "列表项二"
            - 姓名: "王五"
              职责: "开发工程师"
              备注: ""
  图像内容处理:
    图像提取:
      - "从 .docx 文件中提取图像数据（如 PNG, JPEG 格式）。"
      - "为每个图像分配临时标识符或使用原始文件名（如果可用）。"
    语义描述生成:
      - "调用外部的多模态大语言模型LLM，如 GPT-4o, Gemini。"
      - "将提取的图像数据发送给 API，获取图像的文本描述。"
      - "可以考虑提供引导性提示prompt以获取更符合需求的描述。"
    描述集成至YAML输出:
      说明: "将生成的文本描述作为特定类型的元素插入到 YAML 输出中，位置对应其在原文档中的位置。"
      示例:
        - type: image
          name: "sales_chart" # 可选，解析 Alt Text
          description: "一张柱状图，显示一月至六月的销售额稳步增长，六月销售额最高。" # 由 LLM 生成

技术选型与实现要点:
  DOCX解析库:
    说明: "Python 的 `python-docx` 库"
    推荐:
      - "Python: python-docx"
      - "Java: Apache POI"
  YAML生成库:
    说明: "例如：Python 的 `PyYAML` 或 `ruamel.yaml`，Java 的 `SnakeYAML` 等。"
    推荐:
      - "Python: PyYAML (或 ruamel.yaml 以更好地支持注释和顺序)"
      - "Java: SnakeYAML"
  LLM_Vision_API集成:
    要点:
      - "使用相应服务提供商的 SDK (Software Development Kit) 或直接进行 HTTP API 调用。"
      - "妥善管理 API 密钥和认证。"
  命令行接口_CLI:
    说明: "提供清晰的命令行参数，以便用户操作。"
    参数示例: |
      docx-plainify <input_file.docx> -o <output_file.yaml>
      --describe-images
  错误处理与日志:
    要求:
      - "对文件读取错误、API 调用失败、不支持的 DOCX 元素等进行健壮的错误处理。"
      - "提供不同级别的日志输出（如 DEBUG, INFO, WARNING, ERROR），方便调试和用户反馈。"
